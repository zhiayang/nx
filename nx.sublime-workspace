{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"LIB",
				"LIBFFI_CFLAGS"
			],
			[
				"CXX",
				"CXXFLAGS"
			],
			[
				"add_projec",
				"add_project_arguments\tadd_project_arguments()"
			],
			[
				"tou",
				"toUnionType\tUnionType * toUnionType()"
			],
			[
				"generic",
				"genericContextStack\tstd::vector<TypeParamMap_t> genericContextStack"
			],
			[
				"typecheck",
				"typecheck\tTCResult Parameterisable::typecheck(sst::TypecheckState *fs, fir::Type *infer, const TypeParamMap_t &gmaps)"
			],
			[
				"erase",
				"erase\titerator erase(const_iterator __first, const_iterator __last)"
			],
			[
				"getmuta",
				"getMutablePointerTo\tType * getMutablePointerTo()"
			],
			[
				"getpoin",
				"getPointerElementType\tType * getPointerElementType()"
			],
			[
				"FnCallArgument",
				"FnCallArgument\tFnCallArgument(const Location &l, const std::string &n, sst::Expr *v, ast::Expr *o)"
			],
			[
				"isuni",
				"isUnionVariantType\tbool isUnionVariantType()"
			],
			[
				"type",
				"typeDefnMap\tstd::unordered_map<fir::Type *, TypeDefn *> typeDefnMap"
			],
			[
				"Typ",
				"TypecheckState\tTypecheckState"
			],
			[
				"getvariant",
				"GetUnionVariantID\tValue * GetUnionVariantID(Value *unn)"
			],
			[
				"addvaluetomap",
				"addValueToMap\t(lambda) addValueToMap"
			],
			[
				"getvalue",
				"getSignedValue\tint64_t getSignedValue()"
			],
			[
				"Union",
				"Union_GetValue\tfir::OpKind Union_GetValue"
			],
			[
				"getid",
				"getVariantId\tsize_t getVariantId()"
			],
			[
				"touni",
				"toUnionVariantType\tUnionVariantType * toUnionVariantType()"
			],
			[
				"tounion",
				"toUnionVariantType\tUnionVariantType * toUnionVariantType()"
			],
			[
				"setunionvar",
				"SetUnionVariantID\tValue * SetUnionVariantID(Value *unn, size_t id)"
			],
			[
				"Uni",
				"UnionVariantDefn\tUnionVariantDefn"
			],
			[
				"isunon",
				"isUnionVariantType\tbool isUnionVariantType()"
			],
			[
				"debug",
				"printIRDebugMessage\tvoid printIRDebugMessage(const std::string &msg, const std::vector<fir::Value *> &vals)"
			],
			[
				"toun",
				"toUnionVariantType\tUnionVariantType * toUnionVariantType()"
			],
			[
				"getuni",
				"GetUnionVariantID\tValue * GetUnionVariantID(Value *unn)"
			],
			[
				"Un",
				"UnionVariant\tfir::TypeKind UnionVariant"
			],
			[
				"id",
				"variantId\tsize_t variantId"
			],
			[
				"Variant",
				"UnionVariantDefn\tUnionVariantDefn"
			],
			[
				"read",
				"readableName\tstd::string Locatable::readableName"
			],
			[
				"getstruct",
				"getStructElementType\tType * getStructElementType(unsigned int N) const"
			],
			[
				"createalloca",
				"CreateAlloca\tAllocaInst * CreateAlloca(Type *Ty)"
			],
			[
				"getvaria",
				"getVariants\tstd::unordered_map<std::string, Type *> getVariants()"
			],
			[
				"getele",
				"getElementN\tfir::Type * getElementN(size_t n)"
			],
			[
				"find",
				"find\tstd::unordered_map<std::basic_string<char>, unsigned long, std::hash<std::basic_string<char> >, std::equal_to<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, unsigned long> > >::const_iterator find(const std::unordered_map<std::basic_string<char>, unsigned long, std::hash<std::basic_string<char> >, std::equal_to<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, unsigned long> > >::key_type &__k) const"
			],
			[
				"value",
				"CreateValue\tfir::Value * CreateValue(fir::Type *t)"
			],
			[
				"getvari",
				"getVariantType\tfir::Type * getVariantType(const std::string &name)"
			],
			[
				"getva",
				"getVariantCount\tsize_t getVariantCount()"
			],
			[
				"unordere",
				"unordered_map\tunordered_map<class _Key, class _Tp>"
			],
			[
				"left",
				"left\tast::Expr * left"
			],
			[
				"gecu",
				"getCurrentScope\tstd::vector<std::string> getCurrentScope()"
			],
			[
				"Uno",
				"UnionVariantDefn\tUnionVariantDefn"
			],
			[
				"unordr",
				"unordered_map\tunordered_map<class _Key, class _Tp>"
			],
			[
				"make",
				"make\tSimpleError make(MsgType t, const Location &l, const char *fmt, Ts ts...)"
			],
			[
				"Tp",
				"TypecheckState\tTypecheckState"
			],
			[
				"Cop",
				"copysign\tdouble copysign(double, double)"
			],
			[
				"from",
				"fromModel\tstd::vector<RenderObject *> fromModel(const rx::Model &model)"
			],
			[
				"lights",
				"pointLights\tstd::vector<PointLight> pointLights"
			],
			[
				"addref",
				"addRefCountedValue\tvoid addRefCountedValue(fir::Value *val)"
			],
			[
				"islva",
				"islorclvalue\tbool islorclvalue()"
			],
			[
				"isslicetyp",
				"isArraySliceType\tbool isArraySliceType()"
			],
			[
				"getcur",
				"getCurrentSubscriptArray\tExpr * getCurrentSubscriptArray()"
			],
			[
				"Subscript",
				"SubscriptDollarOp\tSubscriptDollarOp"
			],
			[
				"extract",
				"ExtractValue\tValue * ExtractValue(Value *val, const std::vector<size_t> &inds)"
			],
			[
				"Ident",
				"Ident\tIdent"
			],
			[
				"push",
				"pushTree\tvoid pushTree(const std::string &name)"
			],
			[
				"Value",
				"GlobalValue\tGlobalValue"
			],
			[
				"na",
				"getName\tconst Identifier & Value::getName()"
			],
			[
				"print",
				"print\tvoid print(raw_ostream &O) const"
			],
			[
				"ost",
				"raw_string_ostream\traw_string_ostream"
			],
			[
				"getar",
				"getArrayElementType\tType * Type::getArrayElementType() const"
			],
			[
				"getpo",
				"getPointerTo\tType * getPointerTo()"
			],
			[
				"unwrapconsantnu",
				"unwrapConstantNumber\tfir::ConstantValue * unwrapConstantNumber(fir::ConstantNumber *cv, fir::Type *target)"
			],
			[
				"ConstantNumber",
				"ConstantNumberType\tConstantNumberType"
			],
			[
				"getfilename",
				"getFilenameFromPath\tstd::string getFilenameFromPath(std::string path)"
			],
			[
				"irdebu",
				"pushIRDebugIndentation\tvoid pushIRDebugIndentation()"
			],
			[
				"generatereser",
				"generateReserveAtLeastFunction\tfir::Function * generateReserveAtLeastFunction(CodegenState *cs, fir::Type *saa)"
			],
			[
				"get",
				"getCurrentCFPoint\tControlFlowPoint getCurrentCFPoint()"
			],
			[
				"str",
				"toString\tstd::string toString() const"
			],
			[
				"getpointer",
				"getPointerElementType\tType * getPointerElementType()"
			],
			[
				"autocast",
				"oneWayAutocast\tCGResult oneWayAutocast(const CGResult &from, fir::Type *target)"
			],
			[
				"isbuil",
				"isBuiltinOperator\tbool isBuiltinOperator(std::string op)"
			],
			[
				"For",
				"ForArrayDecompLoop\tForArrayDecompLoop"
			],
			[
				"isr",
				"isArrayType()\tbool"
			],
			[
				"Const",
				"ConstantValue\tstruct"
			],
			[
				"creategetenum",
				"CreateGetEnumCaseValue(fir::Value *ecs)\tfir::Value *"
			],
			[
				"val",
				"value\tfir::ConstantValue *"
			],
			[
				"va",
				"value\tfir::ConstantValue *"
			],
			[
				"Enum",
				"EnumDotOp\tstruct"
			],
			[
				"void",
				"getVoid()\tfir::VoidType *"
			],
			[
				"to",
				"convertParserTypeToFIR(pts::Type *pt)\tfir::Type *"
			],
			[
				"Identifier",
				"Identifier(std::string n, IdKind k)\tconstructor"
			],
			[
				"fr",
				"front() const\tconst lexer::Token &"
			],
			[
				"create",
				"Create(llvm::LLVMContext &Context)\tllvm::BasicBlock *"
			],
			[
				"createret",
				"CreateRet(llvm::Value *V)\tllvm::ReturnInst *"
			],
			[
				"createintcast",
				"CreateIntCast(llvm::Value *V, llvm::Type *DestTy, bool isSigned)\tllvm::Value *"
			],
			[
				"createcall",
				"CreateCall(llvm::FunctionType *FTy, llvm::Value *Callee, ArrayRef<llvm::Value *> Args)\tllvm::CallInst *"
			],
			[
				"entryfunc",
				"entryfunc\tllvm::Function *"
			],
			[
				"arg",
				"arg_begin()\tllvm::Function::arg_iterator"
			],
			[
				"SPU",
				"SUPERTINYSRC"
			],
			[
				"SUPERTIN",
				"SUPERTINYBIN"
			],
			[
				"namespace",
				"setNamespace(const std::vector<std::string> &scope)\tstd::pair<sst::StateTree *, ValueTree *>"
			],
			[
				"end",
				"cgEnd\tfir::Value *"
			],
			[
				"begin",
				"begin\tsst::Expr *"
			],
			[
				"cg",
				"cgSubscriptee\tfir::Value *"
			],
			[
				"ar",
				"array\tsst::Expr *"
			],
			[
				"creategep",
				"CreateGEP2(fir::Value *ptr, fir::Value *ptrIndex, fir::Value *elmIndex)\tfir::Value *"
			],
			[
				"getdynamic",
				"CreateGetDynamicArrayRefCount(fir::Value *ptr)\tfir::Value *"
			],
			[
				"FuncDef",
				"FunctionDefn\tstruct"
			],
			[
				"Func",
				"FunctionDefn\tstruct"
			],
			[
				"insert",
				"insert(std::vector<sst::FunctionDecl::Param, std::allocator<sst::FunctionDecl::Param> >::const_iterator __position, std::vector<sst::FunctionDecl::Param, std::allocator<sst::FunctionDecl::Param> >::const_reference __x)\tstd::vector<sst::FunctionDecl::Param, std::allocator<sst::FunctionDecl::Param> >::iterator"
			],
			[
				"static",
				"staticMethods\tstd::vector<FunctionDefn *>"
			],
			[
				"L",
				"LitRValue\tCGResult::VK"
			],
			[
				"getfunction",
				"getFunction(llvm::StringRef Name) const\tllvm::Function *"
			],
			[
				"e",
				"External\tfir::LinkageType"
			],
			[
				"globalva",
				"GlobalVariable\tclass"
			],
			[
				"generated",
				"generatedDefn\tsst::FunctionDefn *"
			],
			[
				"generaete",
				"generateDeclaration(sst::TypecheckState *fs, fir::Type *infer)\tvoid"
			],
			[
				"Stat",
				"StaticStmt\tstruct"
			],
			[
				"map",
				"map(std::vector<T> input, UnaryOp fn)\tstd::vector<K>"
			],
			[
				"Funt",
				"FunctionCall\tstruct"
			],
			[
				"codegen",
				"Stmt::codegen(cgn::CodegenState *cs)\tCGResult"
			],
			[
				"target",
				"target\tsst::Defn *"
			],
			[
				"name",
				"name\tstd::string"
			],
			[
				"Functo",
				"FunctionCall\tstruct"
			],
			[
				"resolve",
				"resolveFunctionFromCandidates(std::vector<Defn *> fs, std::vector<FunctionDecl::Param> arguments, sst::TypecheckState::PrettyError *errs)\tsst::Defn *"
			],
			[
				"arglo",
				"targetLocs\tstd::vector<Location>"
			],
			[
				"values",
				"values\tstd::unordered_map<std::string, std::vector<CGResult> >"
			],
			[
				"add",
				"addRefCountedValue(fir::Value *val)\tvoid"
			],
			[
				"removerefcounted",
				"removeRefCountedValue(fir::Value *val)\tvoid"
			],
			[
				"Expr",
				"Expr\tstruct"
			],
			[
				"getleem",
				"getElementN(size_t n)\tfir::Type *"
			],
			[
				"pop",
				"pop_front()\tvoid"
			],
			[
				"scope",
				"getCurrentScope()\tstd::vector<std::string>"
			],
			[
				"Identif",
				"Identifier\tstruct"
			],
			[
				"front",
				"front() const\tconst lexer::Token &"
			],
			[
				"reverse",
				"reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\tvoid"
			],
			[
				"serialise",
				"serialiseScope(std::vector<std::string> scope)\tstd::string"
			]
		]
	},
	"buffers":
	[
		{
			"file": "bootstrap.sh",
			"settings":
			{
				"buffer_size": 10188,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "libs/libnxsc/makefile",
			"settings":
			{
				"buffer_size": 904,
				"line_ending": "Unix"
			}
		},
		{
			"file": "libs/libc/source/stdio/_format.cpp",
			"settings":
			{
				"buffer_size": 15156,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 233.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"meson",
				"Set Syntax: Meson"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"syntax c++",
				"Set Syntax: C++"
			],
			[
				"package control sett",
				"Preferences: Package Control Settings – User"
			],
			[
				"spaces",
				"Indentation: Convert to Spaces"
			],
			[
				"ecc",
				"EasyClangComplete: Settings"
			],
			[
				"show",
				"EasyClangComplete: Show all errors"
			],
			[
				"easy",
				"EasyClangComplete: Show all errors"
			],
			[
				"upda",
				"Package Control: Upgrade Package"
			],
			[
				"error",
				"EasyClangComplete: Show all errors"
			],
			[
				"flax",
				"Set Syntax: Flax"
			],
			[
				"h",
				"Snippet: Copyright Header"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"ui",
				"UI: Select Theme"
			],
			[
				"col",
				"UI: Select Color Scheme"
			],
			[
				"j",
				"Set Syntax: Java"
			],
			[
				"scheme",
				"UI: Select Theme"
			],
			[
				"list",
				"Schemr: List all schemes"
			],
			[
				"schem",
				"UI: Select Color Scheme"
			],
			[
				"schemr",
				"Schemr: List all schemes"
			],
			[
				"theme",
				"Schemr: Next scheme"
			],
			[
				"colour",
				"Package Control: Upgrade Package"
			],
			[
				"llvm",
				"Set Syntax: LLVM"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"ch",
				"Snippet: Copyright Header"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"scope",
				"Toggle ScopeAlways"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"c",
				"Snippet: Copyright Header"
			],
			[
				"clang",
				"EasyClangComplete: Settings"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"remve",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"upd",
				"Package Control: Upgrade Package"
			],
			[
				"disal",
				"Package Control: Disable Package"
			],
			[
				"cj",
				"Set Syntax: Clojure"
			],
			[
				"incr",
				"Increment Selection"
			],
			[
				"inc",
				"Increment Selection"
			],
			[
				"increment",
				"Increment Selection"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"dbe",
				"AnarchyDebug: Start debugger"
			],
			[
				"dbeu",
				"AnarchyDebug: Start debugger"
			],
			[
				"debu",
				"AnarchyDebug: Toggle Breakpoint"
			],
			[
				"debug",
				"AnarchyDebug: Start debugger"
			],
			[
				"remvoe",
				"Package Control: Remove Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"di",
				"Package Control: Disable Package"
			],
			[
				"remove ",
				"Package Control: Remove Package"
			],
			[
				"l",
				"SortBy: Length of lines"
			],
			[
				"length",
				"SortBy: Length of lines"
			],
			[
				"len",
				"SortBy: Length of lines"
			],
			[
				"sort",
				"Sort Lines"
			],
			[
				"enalbe",
				"Package Control: Enable Package"
			],
			[
				"isnta",
				"Package Control: Install Package"
			],
			[
				"enble",
				"Package Control: Enable Package"
			],
			[
				"packageres",
				"PackageResourceViewer: Extract Package"
			],
			[
				"hc",
				"HTML: Encode Special Characters"
			],
			[
				"sscope",
				"Set Syntax: SublimeClangErrorPanel"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"livestyle",
				"LiveStyle: Install WebKit extension"
			],
			[
				"packagecontrol upgrade",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"clean",
				"Build: Clean"
			],
			[
				"clena",
				"Build: Make clean"
			],
			[
				"",
				"About"
			],
			[
				"clea",
				"Build: Make clean"
			],
			[
				"hea",
				"Snippet: Copyright Header"
			],
			[
				"header",
				"Snippet: Copyright Header"
			],
			[
				"lean",
				"Build: Make clean"
			],
			[
				"claena",
				"SublimeClang: Clear cache"
			],
			[
				"eah",
				"Set Syntax: HTML (ASP)"
			],
			[
				"head",
				"Snippet: Copyright Header"
			],
			[
				"haeder",
				"Snippet: Copyright Header"
			],
			[
				"cleam",
				"Package Control: Remove Package"
			],
			[
				"clen",
				"Build: Make clean"
			],
			[
				"make ",
				"Build: Make clean"
			],
			[
				"mak",
				"Build: Make clean"
			],
			[
				"make clean",
				"Build: Make clean"
			],
			[
				":make",
				"Set Syntax: Makefile"
			],
			[
				"package remo",
				"Package Control: Remove Package"
			],
			[
				"package install",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: List Packages"
			],
			[
				"pacage remo",
				"Package Control: Remove Package"
			],
			[
				"package",
				"Package Control: Enable Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"m",
				"Markdown Preview: preview in Browser"
			],
			[
				"p",
				"Package Control: Remove Package"
			],
			[
				"mdp",
				"Markdown Preview: preview in Browser"
			],
			[
				"prev",
				"Markdown Preview: preview in Browser"
			],
			[
				"package remove",
				"Package Control: Remove Package"
			],
			[
				"package list",
				"Package Control: List Packages"
			],
			[
				"git",
				"Package Control: Install Package"
			],
			[
				"term",
				"Open in terminal"
			],
			[
				"sub",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"sni",
				"Snippet: Inserts standard licensing info and filename"
			],
			[
				"ani",
				"Snippet: Inserts standard licensing info and filename"
			],
			[
				"sn",
				"Snippet: Inserts standard licensing info and filename"
			],
			[
				"snipp",
				"Snippet: Inserts standard licensing info and filename"
			],
			[
				"snippet",
				"Snippet: Inserts standard licensing info and filename"
			],
			[
				"Snipp",
				"Set Syntax: Sublime Text Snippet (Raw)"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"pr",
				"Package Control: Remove Package"
			],
			[
				"p r",
				"Package Control: Remove Package"
			],
			[
				"package i",
				"Package Control: Install Package"
			],
			[
				"packag",
				"Preferences: Browse Packages"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"git commi",
				"Git: Commit"
			],
			[
				"package control instal",
				"Package Control: Install Package"
			],
			[
				"package instal",
				"Package Control: Install Package"
			]
		],
		"width": 440.0
	},
	"console":
	{
		"height": 125.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"clear()",
			"clear",
			"reload()",
			"plugin.reload()",
			"plugin.reload(",
			"reload",
			"plugins.reload()",
			"reload()",
			"exit()",
			"help();",
			"help()",
			"help"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/zhiayang/Desktop/Stuff/Code/nx",
		"/Users/zhiayang/Desktop/Stuff/Code/nx/libs"
	],
	"file_history":
	[
		"/Users/zhiayang/Desktop/Stuff/Code/nx/toolchain-setup/build-gcc/x86_64-orionx/libstdc++-v3/config.log",
		"/Users/zhiayang/Desktop/Stuff/Code/nx/toolchain-setup/gcc-8.2.0/libstdc++-v3/configure",
		"/Users/zhiayang/Desktop/Stuff/Code/nx/toolchain-setup/build-gcc/config.log",
		"/Users/zhiayang/Library/Application Support/Sublime Text 3/Packages/User/Plastic/Plastic - Minimised Punctuation.tmTheme",
		"/Users/zhiayang/.config/karabiner/karabiner.json",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/fir/interp/interpreter.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/build/tester.flx",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/fir/interp/compiler.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/libs/libc.flx",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/main.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/.clang_complete",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/makefile",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/arithmetic.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/unions.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/backend/llvm/translator.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/frontend/parser/type.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/defs.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/frontend.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/fir/Types/Type.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/builtin.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/fir/Types/UnionType.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/ir/type.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/mpool.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/frontend/errors.cpp",
		"/Users/zhiayang/Downloads/Cryorig_C7_92mm_Fan_Adapter/files/92mm_Fan_Adapter_for_C7_v2.stl",
		"/Users/zhiayang/Library/Application Support/Sublime Text 3/Packages/Package Control/Package Control.sublime-settings",
		"/Users/zhiayang/Library/Application Support/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/build/generate_test.py",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/build/plots.txt",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/build/speed-test.py",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/ir/interp.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/build/supertiny.flx",
		"/Users/zhiayang/Desktop/Stuff/Code/xcmlabels/src/thing.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/flax.sublime-project",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/build/massive.flx",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/build/plot.txt",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/dotop.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/classes.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/polymorph/solver.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/backend/backend.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/frontend/frontend.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/backend.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/polymorph/transforms.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/polymorph/misc.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/polymorph.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/function.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/typecheckstate.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/function.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/classes.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/resolver/driver.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/call.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/constructor.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/sst.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/backends/llvm.h",
		"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/cmath",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/precompile.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/call.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/ast.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/.vscode/c_cpp_properties.json",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/ir/constant.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/generics.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/genericinference.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/structs.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/unions.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/build/tests/scopes.flx",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/changelog.md",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/variable.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/enums.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/build/tests/linkedlist.flx",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/fir/IRBuilder.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/autocasting.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/arithmetic.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/fir/Instruction.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/ir/instruction.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/ir/irbuilder.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/type.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/misc.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/typecheck.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/misc.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/alloc.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/codegen.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/codegenstate.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/frontend/parser/expr.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/backend/llvm/linker.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/casting.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/glue/arrays.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/literals.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/loops.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/controlflow.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/literals.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/alloc.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/ranges.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/assign.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/slice.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/gluecode.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/glue/any.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/typecheck/variable.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/fir/Types/StructType.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/structs.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/codegen/sizeof.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/fir/Module.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/ir/module.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/frontend/parser/toplevel.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/parser_internal.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/frontend/lexer.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/include/lexer.h",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/frontend/file.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/frontend/collector.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/libs/stdio.flx",
		"/Users/zhiayang/Desktop/Stuff/Code/flax/source/external/tinyformat/tinyformat.h",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/include/px.h",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/include/lx.h",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/px/integrator.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/lx/math.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/rx/Renderer.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/rx/Font.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/include/rx.h",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/rx/RenderObject.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/lx/misc.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/util/Util.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/include/utilities.h",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/include/lx/fvec2.h",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/include/rx/lighting.h",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/include/rx/shaders.h",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/makefile",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/rx/ShaderProgram.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/lx/swizzling.cpp",
		"/Users/zhiayang/Desktop/Stuff/Code/sas/source/lx/vec2.cpp"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 106.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"gcc_no_link=",
			"ac_fn_c_check_func",
			"checking for shl_load",
			"shl_load",
			"as_lineno",
			"ac",
			"no_link",
			"gcc_no_link=",
			"gcc_no_link",
			"dlopen",
			"log10",
			"after",
			"gcc"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "bootstrap.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10188,
						"regions":
						{
						},
						"selection":
						[
							[
								9621,
								9621
							]
						],
						"settings":
						{
							"color_helper.box_height": 15,
							"color_helper.color_scheme": "Packages/User/Plastic/Plastic - Minimised Punctuation.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": ".sh",
								"current_syntax": "ShellScript/Bash",
								"enabled": false,
								"last_updated": 1565676364.7
							},
							"syntax": "Packages/ShellScript/Bash.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4414.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "libs/libnxsc/makefile",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 904,
						"regions":
						{
						},
						"selection":
						[
							[
								481,
								481
							]
						],
						"settings":
						{
							"color_helper.box_height": 15,
							"color_helper.color_scheme": "Packages/User/Plastic/Plastic - Minimised Punctuation.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": "",
								"current_syntax": "Makefile Plus/makefile-plus",
								"enabled": false,
								"last_updated": 1565676364.7
							},
							"syntax": "Packages/Makefile Plus/makefile-plus.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "libs/libc/source/stdio/_format.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15156,
						"regions":
						{
						},
						"selection":
						[
							[
								11079,
								11079
							]
						],
						"settings":
						{
							"color_helper.box_height": 15,
							"color_helper.color_scheme": "Packages/User/Plastic/Plastic - Minimised Punctuation.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": ".cpp",
								"current_syntax": "C++/C++",
								"enabled": false,
								"last_updated": 1565676364.7
							},
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6215.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 63.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 98.0
	},
	"pinned_build_system": "",
	"project": "nx.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"format",
				"libs/libc/source/stdio/_format.cpp"
			],
			[
				"linker",
				"source/backend/llvm/linker.cpp"
			],
			[
				"classes",
				"build/tests/classes.flx"
			],
			[
				"tester",
				"build/tester.flx"
			],
			[
				"compiler",
				"source/fir/interp/compiler.cpp"
			],
			[
				"libc",
				"libs/libc.flx"
			],
			[
				"supertiny",
				"build/supertiny.flx"
			],
			[
				"main",
				"source/main.cpp"
			],
			[
				"interpreter",
				"source/fir/interp/interpreter.cpp"
			],
			[
				"interp",
				"source/fir/interp/interpreter.cpp"
			],
			[
				"makefile",
				"makefile"
			],
			[
				"transl",
				"source/backend/llvm/translator.cpp"
			],
			[
				"defs",
				"source/include/defs.h"
			],
			[
				"frontend",
				"source/include/frontend.h"
			],
			[
				"ari",
				"source/codegen/arithmetic.cpp"
			],
			[
				"trans",
				"source/backend/llvm/translator.cpp"
			],
			[
				"type.cpp",
				"source/fir/Types/Type.cpp"
			],
			[
				"builtin",
				"source/codegen/builtin.cpp"
			],
			[
				"unintype",
				"source/fir/Types/UnionType.cpp"
			],
			[
				"type.h",
				"source/include/ir/type.h"
			],
			[
				"unions",
				"source/typecheck/unions.cpp"
			],
			[
				"errors.cpp",
				"source/frontend/errors.cpp"
			],
			[
				"make",
				"makefile"
			],
			[
				"main.cp",
				"source/main.cpp"
			],
			[
				"plot",
				"build/plot.txt"
			],
			[
				"misc",
				"source/typecheck/polymorph/misc.cpp"
			],
			[
				"poly",
				"source/include/polymorph.h"
			],
			[
				"typecheck",
				"source/typecheck/typecheckstate.cpp"
			],
			[
				"function",
				"source/codegen/function.cpp"
			],
			[
				"llvm.h",
				"source/include/backends/llvm.h"
			],
			[
				"sst",
				"source/include/sst.h"
			],
			[
				"prec",
				"source/include/precompile.h"
			],
			[
				"constant.h",
				"source/include/ir/constant.h"
			],
			[
				"makefil",
				"makefile"
			],
			[
				"genericinf",
				"source/typecheck/genericinference.cpp"
			],
			[
				"gener",
				"source/typecheck/generics.cpp"
			],
			[
				"call",
				"source/typecheck/call.cpp"
			],
			[
				"generi",
				"source/typecheck/generics.cpp"
			],
			[
				"scopes",
				"build/tests/scopes.flx"
			],
			[
				"cha",
				"changelog.md"
			],
			[
				"structs",
				"source/typecheck/structs.cpp"
			],
			[
				"enum",
				"source/typecheck/enums.cpp"
			],
			[
				"defs.h",
				"source/include/defs.h"
			],
			[
				"constr",
				"source/codegen/constructor.cpp"
			],
			[
				"constructor",
				"source/codegen/constructor.cpp"
			],
			[
				"linkedl",
				"build/tests/linkedlist.flx"
			],
			[
				"change",
				"changelog.md"
			],
			[
				"ast.h",
				"source/include/ast.h"
			],
			[
				"linkedli",
				"build/tests/linkedlist.flx"
			],
			[
				"union",
				"source/fir/Types/UnionType.cpp"
			],
			[
				"arithmet",
				"source/codegen/arithmetic.cpp"
			],
			[
				"irbui",
				"source/fir/IRBuilder.cpp"
			],
			[
				"arithm",
				"source/typecheck/arithmetic.cpp"
			],
			[
				"irb",
				"source/fir/IRBuilder.cpp"
			],
			[
				"casting",
				"source/codegen/casting.cpp"
			],
			[
				"instru",
				"source/fir/Instruction.cpp"
			],
			[
				"call.cpp",
				"source/typecheck/call.cpp"
			],
			[
				"transla",
				"source/backend/llvm/translator.cpp"
			],
			[
				"uniontype",
				"source/fir/Types/UnionType.cpp"
			],
			[
				"arith",
				"source/typecheck/arithmetic.cpp"
			],
			[
				"codegen.h",
				"source/include/codegen.h"
			],
			[
				"codegensta",
				"source/codegen/codegenstate.cpp"
			],
			[
				"sst.h",
				"source/include/sst.h"
			],
			[
				"air",
				"source/typecheck/arithmetic.cpp"
			],
			[
				"expr.cpp",
				"source/frontend/parser/expr.cpp"
			],
			[
				"dotop",
				"source/typecheck/dotop.cpp"
			],
			[
				"arit",
				"source/typecheck/arithmetic.cpp"
			],
			[
				"irbuil",
				"source/fir/IRBuilder.cpp"
			],
			[
				"uni",
				"source/typecheck/unions.cpp"
			],
			[
				"ut",
				"source/fir/Types/UnionType.cpp"
			],
			[
				"control",
				"source/codegen/controlflow.cpp"
			],
			[
				"loops",
				"source/codegen/loops.cpp"
			],
			[
				"variable",
				"source/codegen/variable.cpp"
			],
			[
				"literals",
				"source/codegen/literals.cpp"
			],
			[
				"alloc",
				"source/codegen/alloc.cpp"
			],
			[
				"ranges",
				"source/codegen/ranges.cpp"
			],
			[
				"arrays",
				"source/codegen/glue/arrays.cpp"
			],
			[
				"assign",
				"source/codegen/assign.cpp"
			],
			[
				"slice",
				"source/codegen/slice.cpp"
			],
			[
				"ut.",
				"source/fir/Types/UnionType.cpp"
			],
			[
				"uniontyp",
				"source/fir/Types/UnionType.cpp"
			],
			[
				"instr",
				"source/include/ir/instruction.h"
			],
			[
				"unontyp",
				"source/fir/Types/UnionType.cpp"
			],
			[
				"irbul",
				"source/include/ir/irbuilder.h"
			],
			[
				"gluecode",
				"source/include/gluecode.h"
			],
			[
				"type.",
				"source/frontend/parser/type.cpp"
			],
			[
				"call.",
				"source/typecheck/call.cpp"
			],
			[
				"typecpp",
				"source/fir/Types/Type.cpp"
			],
			[
				"modue.",
				"source/fir/Module.cpp"
			],
			[
				"module",
				"source/include/ir/module.h"
			],
			[
				"mo",
				"source/fir/Module.cpp"
			],
			[
				"module.cpp",
				"source/fir/Module.cpp"
			],
			[
				"parser/",
				"source/frontend/parser/type.cpp"
			],
			[
				"expr",
				"source/frontend/parser/expr.cpp"
			],
			[
				"parserint",
				"source/include/parser_internal.h"
			],
			[
				"toplevel",
				"source/frontend/parser/toplevel.cpp"
			],
			[
				"lexer.h",
				"source/include/lexer.h"
			],
			[
				"lexer",
				"source/frontend/lexer.cpp"
			],
			[
				"stdio",
				"libs/stdio.flx"
			],
			[
				"supertin",
				"build/supertiny.flx"
			],
			[
				"file",
				"source/frontend/file.cpp"
			],
			[
				"colle",
				"source/frontend/collector.cpp"
			],
			[
				"parser/top",
				"source/frontend/parser/toplevel.cpp"
			],
			[
				"lx.h",
				"source/include/lx.h"
			],
			[
				"font",
				"source/rx/Font.cpp"
			],
			[
				"renderob",
				"source/rx/RenderObject.cpp"
			],
			[
				"util",
				"source/include/utilities.h"
			],
			[
				"cutil",
				"source/util/Util.cpp"
			],
			[
				"renderer",
				"source/rx/Renderer.cpp"
			],
			[
				"makef",
				"makefile"
			],
			[
				"sha",
				"source/rx/ShaderProgram.cpp"
			],
			[
				"shaders",
				"source/include/rx/shaders.h"
			],
			[
				"shaderpro",
				"source/rx/ShaderProgram.cpp"
			],
			[
				"rx.h",
				"source/include/rx.h"
			],
			[
				"model.h",
				"source/include/rx/model.h"
			],
			[
				"varia",
				"source/codegen/variable.cpp"
			],
			[
				"varialbe",
				"source/codegen/variable.cpp"
			],
			[
				"refcount",
				"source/codegen/refcounting.cpp"
			],
			[
				"an",
				"build/tests/anytest.flx"
			],
			[
				"constru",
				"source/codegen/constructor.cpp"
			],
			[
				"changelog",
				"changelog.md"
			],
			[
				"ar",
				"build/tests/arraytest.flx"
			],
			[
				"generics",
				"source/typecheck/generics.cpp"
			],
			[
				"generic",
				"build/tests/generics.flx"
			],
			[
				"const",
				"source/fir/ConstantValue.cpp"
			],
			[
				"saa",
				"source/codegen/glue/saa_common.cpp"
			],
			[
				"arra",
				"source/codegen/glue/arrays.cpp"
			],
			[
				"strings",
				"source/codegen/glue/strings.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "flax",
		"selected_items":
		[
			[
				"flax",
				"~/Desktop/Stuff/Code/flax/flax.sublime-project"
			],
			[
				"mx",
				"~/Desktop/Stuff/OSDev/mx/mx.sublime-project"
			],
			[
				"",
				"~/Documents/Chem Notes/chemnotes.sublime-project"
			],
			[
				"web",
				"~/Dropbox/Public/ProjectsDay/webreport.sublime-project"
			],
			[
				"wb",
				"~/Dropbox/Public/ProjectsDay/webreport.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 400.0,
		"last_filter": "doblock",
		"selected_items":
		[
			[
				"doblock",
				"doBlockEndThings"
			],
			[
				"fastvect",
				"FastVector"
			],
			[
				"statetree",
				"StateTree"
			],
			[
				"createphi",
				"CreatePHINode"
			],
			[
				"voidtype",
				"VoidType"
			],
			[
				"checkandc",
				"checkAndCodegenFunctionCallParameters"
			],
			[
				"instantiategeneric",
				"instantiateGenericFunctionUsingMapping"
			],
			[
				"ttype",
				"TType"
			],
			[
				"ifstt",
				"IfStmt"
			],
			[
				"parseif",
				"parseIf"
			],
			[
				"assignva",
				"assignValueToAny"
			],
			[
				"parsereturn",
				"parseReturn"
			],
			[
				"parsertype",
				"getTypeFromParserType"
			],
			[
				"parsestatem",
				"parseStatement"
			],
			[
				"parsestruct",
				"parseStruct"
			],
			[
				"finddotopera",
				"findDotOperator"
			],
			[
				"checg",
				"checkGenericFunction"
			],
			[
				"main",
				"main"
			],
			[
				"parsetype",
				"parseType"
			],
			[
				"autoca",
				"autoCastType"
			],
			[
				"clonefn",
				"cloneFunctionTree"
			],
			[
				"frombui",
				"fromBuiltin"
			],
			[
				"getinteger",
				"getIntegerValue"
			],
			[
				"parseii",
				"parseInitFunc"
			],
			[
				"manglememberfunction",
				"mangleMemberFunction"
			],
			[
				"tryre",
				"tryResolveAndInstantiateGenericFunction"
			],
			[
				"resolvefunct",
				"resolveFunctionName"
			],
			[
				"getoperato",
				"getOperatorOverload"
			],
			[
				"globalvaria",
				"GlobalVariable"
			],
			[
				"getllvm",
				"getLlvmTypeFromExprType"
			],
			[
				"",
				"#### Language Syntax"
			],
			[
				"resolve",
				"resolveFunction"
			],
			[
				"resolvefunc",
				"resolveFunction"
			],
			[
				"calltypein",
				"callTypeInitialiser"
			],
			[
				"getstructini",
				"getStructInitialiser"
			],
			[
				"clonefunc",
				"cloneFunctionTree"
			],
			[
				"parseope",
				"parseOpOverload"
			],
			[
				"parseopo",
				"parseOpOverload"
			],
			[
				"parseopover",
				"parseOpOverload"
			],
			[
				"callop",
				"callOperatorOverloadOnStruct"
			],
			[
				"callopera",
				"callOperatorOverloadOnStruct"
			],
			[
				"arithm",
				"ArithmeticOp"
			],
			[
				"cloneftr",
				"cloneFunctionTree"
			],
			[
				"clonefunct",
				"cloneFunctionTree"
			],
			[
				"findfun",
				"findTypeInFuncTree"
			],
			[
				"parsetypefrom",
				"parseTypeFromString"
			],
			[
				"findtypein",
				"findTypeInFuncTree"
			],
			[
				"unwrapna",
				"unwrapNamespacedType"
			],
			[
				"addfunctio",
				"addFunctionToScope"
			],
			[
				"pushnames",
				"pushNamespaceScope"
			],
			[
				"resolvef",
				"resolveFunction"
			],
			[
				"tryresol",
				"tryResolveAndInstantiateGenericFunction"
			],
			[
				"addpubl",
				"addPublicFunc"
			],
			[
				"addpublic",
				"addPublicFunc"
			],
			[
				"parseimport",
				"parseImport"
			],
			[
				"addnet",
				"addNewType"
			],
			[
				"addnewtype",
				"addNewType"
			],
			[
				"getstructb",
				"getStructMemberByName"
			],
			[
				"getdefault",
				"getDefaultConstructor"
			],
			[
				"getType",
				"getType"
			],
			[
				"typekind",
				"TypeKind"
			],
			[
				"parsetypefromstr",
				"parseTypeFromString"
			],
			[
				"getllvmtyoe",
				"getLlvmTypeFromString"
			]
		],
		"width": 512.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 194.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
